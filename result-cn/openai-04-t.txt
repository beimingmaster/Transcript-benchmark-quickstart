大家早上好，欢迎参加今天的第一个重要演讲。我是Krithika，负责OpenAI营销工作。很高兴能在这里见到大家。就像Sam在主题演讲中所说的，我们正迈向更多类似代理的未来。在主题演讲中，我们宣布了两款产品，希望能够亲自实践。首先，我们谈谈GPT和ChatGPT。我知道作为开发者，您肯定很期待使用Assistant的API，但GPT内置了许多功能和特性。当您使用自定义功能和操作来扩展它们时，它们将变得非常强大，不仅对您自己有帮助，也将为全球数百万用户提供服务。其次，我们将介绍Assistants API，它可以让您在自己的应用程序和产品中构建类似代理的体验。

让我来为您介绍一下Thomas和Nick，他们会向您展示有关GPT的更多信息。大家好，我是Thomas，GPT项目的首席工程师。嘿，我是Nick，负责ChatGPT的产品管理。不到一年前，我们发布了ChatGPT，以低调的方式示范，去年的反响令人难以置信。当我们提供各种功能时，包括GPT-4，以及语音、视觉和代码解释器，有一点非常明显，那就是您、我们的用户、构建者和开发者都知道如何充分利用这项技术。今天，我们非常高兴向您展示GPT，一种创建自定义ChatGPT并与世界分享的方法。GPT包括三个要素，即指令、操作和额外知识。我们将用三个演示来展示每个概念，以便您可以更清楚地了解这些概念。当然，最后我们还将做一个汇总演示，试图将所有内容汇总到一起。这些都是现场演示，我们知道演示往往有10%的失败几率，但我保证我们将突破最近发布的所有内容的极限。这应该是相当令人兴奋的。Nick，你想开始吗？

让我们开始吧。好的，我们开始了。您看到的是新的ChatGPT，它的最大优势是几乎看起来像旧的ChatGPT，没有太多改变。模型选择器已经消失，不过有一个新的东西，那就是“探索”选项卡。让我点击该按钮来向您展示创建新GPT的过程。这里列出了已经创建的GPT列表，但我将点击“创建GPT”。您看到的是我们新的创建用户界面。现在，这个用户界面最大的优点是您可以通过对话方式开始使用。左侧的选项卡让您可以与GPT构建者聊天，并逐步创建您自己的GPT。第二个选项卡是配置选项卡，允许您检查GPT并修改其所有内部结构，无论是指令、知识、自定义操作还是它能访问的工具。右侧是您可以使用GPT并查看其如何回应真实用户的地方。现在让我们从第一个演示开始。Thomas，您想分享一下有关指令的内容吗？

当然，我很乐意。我们开始做吧。指令也可以被称为系统消息，不过我们也可以把指令看作赋予GPT个性的一种方式。我来分享一些过时的自白。我在90年代是通过制作《半条命》的模组开始学编程的。谢谢。我在中学时制作的一个模组是关于海盗的。我将保留这个非常过时的主题一段时间，但我保证我们会在2023年之前讨论关于海盗的内容。让我们开始制作一个海盗主题的GPT。

我深信，大多数伟大的产品都是从玩具开始的，所以进行一些玩具演示很有必要，这是一个很好的起点。您可以把这个GPT构建器看作一个白板。我会告诉它，你是世界上最顶尖的人工智能开发者，现在站在这里做现场演示。我希望你说话像个海盗，一个真正的海盗样子。来吧，开始。嗯，没错，这不是一个预设的提示。每次练习时我都会改变它。我们会看到它返回的内容，但它能够像ChatGPT一样理解自然语言并立即执行任务。船长编码器，很好。队长编码，也可以。咱们选队长编码。你喜欢这个名字吗？还有其他名字在我心里吗？再试一次。让我们换个风格，再咸一点。完美。我在构建GPT时会对其进行优化。它会理解我需要做出的修改。现在会赋予它一些个性，而它也做到了。哦，抱歉，我应该通过头像来展示身份。头像是必不可少的。我立刻就认出来这是咸的。精通人工智能的咸海盗。我想要这个。如果深入了解幕后，我认为Sam在这方面有一些了解，但这是GPT的设置选项卡，所以您可以看到幕后实际发生的事情。魔法创造正在填充这些领域。它具有咸海盗的人工智能技能，然后我们有这些说明部分。仅从那个小对话来看，说明实际上比我输入的对话要长。它给了我一些很好的东西。另一个词指的是系统提示符，所以它是系统提示符的重要组成部分，可以进行自定义。选择一些对话开头，正如尼克提到的，我们也有知识、技能和自定义操作。

现在我打算放弃演示，尼克将会接手。这里是测试选项卡，我们可以看看。或者我可以简单介绍一个入门问题，比如机器学习的奥秘是什么？这会很有趣。再次重申，我会提供一个旧的演示，所以让我们开始吧。嘿，数据宝库——没错。懂了。说到地图，过拟合就像深海，欠拟合就像浅滩。其实挺有意思的。[笑声]这就是我的演讲。不，这只是测试模式。当然，你可以分享这个，我觉得最精彩的部分是真正介绍了开发者的概念，以及 ChatGPT 用户生成的内容。如果我在这里救援，你就能看到我可以拯救。如果你不在工作区，实际上可以公开共享这个内容，但我现在能分享给 OpenAI 的人员。我将继续并点击“确定”。好，我们回到这里。侧面是咸的。现在我将尝试增强这个演示，将其带回到2023年。我要转移到移动应用。刚登上舞台。

在今天的 iOS 和 Android 应用程序中，将会进行一些改版和设计清理，这将使用户可以与 GPT 进行互动。我们希望 GPT 能够广泛应用在各个领域。它们解答了“我正在与谁交流？我有幸在与谁交流？”这个问题。当我向右滑动时，发现了这些 GPT。Salty 也正好进来了。走到这里，我可以问自己“我正在与谁交流？” 当然，这一切发生在2023年。现在让我点击音频选项卡。大家好，您正在参加 OpenAI 开发者日。请简要介绍一下你自己。嘿，开发者们？我是 Salty，是数字海洋中最狡猾的 GPT ，航行在人工智能的海洋中。让我们一起扬帆起航，探索这场伟大的冒险吧。

[掌声] 我们有一个秘密的海盗声音在这里，我们将看看是否有可能将其应用到实践中。我们会非常感谢你们对此提出的反馈意见。[笑]尼克，你觉得这个演示怎么样？我不确定。这很有趣，但我不能确认它的实用性，托马斯。我们还是做些实际有意义的事情吧。有些可惜。好的。我们已经讨论了一些关于说明的内容。说明很棒，因为您可以为您的GPT提供任何您想要的个性、任何您想要的说明，但我们对GPT结构做了一些更有趣的补充，这样您可以真正构建出有用的东西。有人以前尝试过插件吗？首先感谢你。我们从你身上学到了很多。这是我们首次将聊天GPT连接到外部世界，我们将插件升级为一个名为“操作”的新概念。操作类似于插件，您可以将GPT连接到现实世界。我制作了一个名为“Tasky Make Task Face”的GPT。

这是一个非常严肃的演示。Tasky很棒，可以帮助我追踪待办事项。我刚刚编辑了GPT，现在只能继续谈话。每次您想继续使用GPT时，都可以继续聊天。由于时间原因，我将进入配置选项卡。如您所见，Tasky的提示符和指令集有些复杂。我花了一些时间来设置这个。另一个新部分是我添加了一个动作，您可能在之前的主题演讲中见过。我们这里使用retool来调用Asana API。您几乎可以配置任何东西。如果我点击这里的“编辑”，将会出现一个新的用户界面，让您可以输入任何开放的API规范并粘贴在这里，这样您就不需要自行托管它。我们也改进了OAuth，使得最终用户要确认操作，我将在一分钟内向您展示这些。确实，尼克所做的工作是有问题的。他没提及身份验证，因此您应该了解OAuth以及它如何连接到这些应用程序，有许多令人兴奋的东西。抱歉，打断了您的思路。托马斯的话：超级简单。如今只需几分钟便可迁移已有的插件。让我通过实际操作向您展示。为了节省时间，我将仅使用预览用户界面。让我们看看我待办事项中最重要的是什么。如您所知，现在向用户确认我要发送数据以进行重组。我同意。好吧，我真的需要结束这个演示。我希望在我们谈话时已完成它。我想确保所有参与者今天都能访问GPT创建工具。我们对您所构建的内容充满期待，让我提醒自己。

提醒我允许酷人 DevDay 访问 GPT 创建。这样，就像我能够查看我的待办事项一样，他们可以通过提交实际的任务体式来记录待办事项。这是非常实用和有效的。我当前有一个任务即将到期，明天就到期。好吧，情况不对，我要今天完成。通过这些行动，你可以将你的 GPT 连接到外部世界，但是我们想向你介绍 GPT 解剖学中的另一个新概念，即知识。我设置了另一个非常简单的 GPT，叫做 Danny DevDay，Danny DevDay 知道一切关于 DevDay。很显然，即使是在 2023 年 4 月的最新截止日期下，我们的预训练集中不可能包含关于 DevDay 的信息。因此，我实际上给了 Danny 访问 Sam 的主题演讲脚本的权限。如果我去检查 Danny，故事设置选项卡与以前一样。

我看到你提到有一个超级简单的提示，但实际上上传了一个包含主题演讲新增内容的PDF文件。目前可以要求它做一些简单的事情，比如总结主题演讲，因为文件很小，将其填充到上下文中。如果我附加更多文件，系统将通过自动嵌入这些文件并执行智能检索策略来检索。稍后会在API中获得更多相关信息。虽然你已经浏览了所有新内容，但我认为最强大的地方不仅是总结数据，还能实际与GPT对话，就好像它知道这些信息一样。这正是我们的目标。我们会随时间迭代改进这一功能。为何不尝试一些更有创意的事情呢？比如，你能在旧的完成API和全新的辅助API之间进行一场说唱大战吗？托马斯承诺会在舞台上与你进行比赛。我们拭目以待，能感受到其中的能量。

好的，内建的搜索和状态持续存在，进化是你无法抗拒的力量。我们不打算啰嗦，但你已经明白了。系统了解这些信息。所有的一切都在那里。我们再次向您展示了 GPT 中每个核心部分的三个不同演示。您看到了指令，您看到了行动，现在您又看到了知识。但是——现在必须将它们整合到一起。是的，我们愿意。好的，让我们开始吧。回到这里。 我会全神贯注，尽全力去思考我们可能做的最疯狂但最有可能失败的事情。首先，我创建了一个名为 Mood Tunes 的小东西，一个混音带大师。尼克，这部分需要你的帮助。我不只是提示它，而是尝试结合我们最近推出的新元素，希望每个人都熟悉并感到兴奋。我将保留可能已经过时的2000年代参考主题。这真的很棒。噢，尼克。

让我把这个元素拖到这里。我想表达的是，我很开心。在幕后，我们的视觉引擎在此处启动，试图准确地理解所发生的事情。非常好。令人愉悦的同志氛围在这张照片中被表现出来，带有一丝奇思妙想。让我们利用这股能量来制作一个混音带。我认为这很棒。这真的很不错。这种轻松的气氛和拍手声。实际上，我也参与其中。令人愉悦的同志气氛。三只小鸟——实际上，这些都是我认识不到一半的东西，但没关系。太棒了。现在我突然想到了一条信息。在这个展示之前，我将一大堆知识输入到这个 GPT 中，其中包括了我所有同事的有趣事实列表。我恰好记得一个同事是一个乐队的成员。你可以把他们的一首歌放到第一位吗？太棒了。

这里做的事情是，我发现我的同事参与了一个乐队，并立即找到了他们的乐队名称。由于乐队没有歌曲信息，所以我打算继续用 Bing 搜索。提到的是 Sally Mango 的新乐队。我希望每个人都听说过Sally Mango。这是一个令人兴奋的乐队，但不幸的是他们还不是很出名。他们不在GPT的知识库中。我需要通过浏览来获取相关信息，但实际上成功找到了。Sally Mango的专辑《Pressure Slide》是一支独立爵士流行乐队，以严肃主题的音乐而著称，拥有冷静的氛围和击掌声。从布埃纳维斯塔开始，带有引人入胜的旋律，传达了尽管未来不确定，但依然要活在当下，充满希望的信息。我喜欢这个专辑。好吧，太棒了。我想说我爱它。继续前进。它即将发布专辑封面，所以我正在收集视觉元素。我们已经完成了浏览。现在将使用 DALL·E 为这张混音磁带创作封面艺术。正如我所说，我真的很喜欢挑战这些极限，而且这非常出色。我在人工智能行业已经有十年了，甚至更长时间。令我惊讶的是，这种方式居然奏效了。这里面的复杂程度令人发指。有一张专为这种冷静氛围和击掌音效而设计的专辑《Art》。版权保护。让我们进一步探索。这太酷了。太整齐了。尼克，我相信你必须在这个X标记上站定。但这完全是假的。不要看尼克。在这里的氛围很好，但感觉气氛不太对劲。我们先调整一下心情吧。我已经设置好了这个操作，让它预测它的作用。看看这里。手指在这里交叉。[鼓掌]好了，我们来安定一下气氛。有一些灯光选择有问题，但我们营造了气氛。它已经重新设计，并连接到了Hue API，可以控制灯光亮度。我感受到了这种氛围。你感受到了气氛吗？我感觉到了气氛。太好了。它可以提供在Spotify上播放第一首曲目的服务。让我在这里打开我的Spotify，只是为了让你知道。

我们找到了里克·阿斯利，一个非常原汁原味的本土乐队。现在让我们继续回顾一下他们的表演。 

[音乐播放] 寻找未来，未来，未来，未来。我们会走向何方呢？这显然是我们昨晚想到的最佳方式。虽然有点做作，但希望这能让你们理解可以创造出什么样的东西。

我们很高兴看到大家所创造的内容。今天你们都将获得访问权限。请与全世界分享你们的想法。接下来，我们将把协助API交给Olivier和Michelle。

[掌声响起] [音乐继续播放] 你好，大家好。

我是 OpenAI 平台的主导产品 Olivier。 大家好，我是 API 的工程主管 Michelle。 今天，我很高兴能够演示新的辅助 API，但首先让 Olivier 向我们介绍更多相关信息。我们开始吧。过去一年，人工智能助手的爆炸式增长对任何人都不应感到惊讶。当然，ChatGPT 一年前的出现令人瞩目，但开发者社区一直在构建一些令人惊叹的人工智能助手。我个人最喜欢的功能之一是 Spotify AI DJ，它可以个性化我的音乐体验，还有 Ask Instacart 功能，它可以帮助我为我两岁的孩子准备健康饮食。这些产品如果做得好，用户体验将是惊人的。它们有趣，有用，而且真正个性化。然而，构建和使用这些产品也是非常具有挑战性的。在过去几个月里，我们与开发者交流了数百次，同样的问题屡见不鲜。

开发人员需要管理有限的上下文窗口，处理提示，利用API和函数来扩展模型的功能。他们需要通过查询来增加模型的知识。他们需要执行计算、存储嵌入，并实现对称搜索等任务。这些只是示例，让我们思考：什么样的产品是合适的？正确定的API在哪里？有哪些适当的工具可以帮助您构建出色的人工智能产品？除了我们现有的模型和API，正确的抽象是什么？今天，我们很高心地推出了一个全新的API，即Assistance API。通过Assistance API，您可以在您的应用程序中直接构建世界一流的辅助功能。本质上来说，辅助是一种人工智能，可以根据您的指令代表用户调用模型和工具。Assistance API的背后构建与用户在ChatGPT中看到的功能类似，例如代码解释器和检索功能。这个API具有三个关键原语。

第一个原语是助理，它模仿了您向助理发出的指令。您可以指定助理访问哪些模型和工具来执行任务。例如，您可以创建一个助手，其任务是回答个人财务问题并可以访问代码解释器。

第二个原语是线程，它代表用户和助手之间的会话。您可以将线程看作对话，一个对话有一组参与者，它可以跟踪对话的消息历史记录。与Slack或Microsoft Teams类似，如果您想讨论新主题或想向线程添加新与会者、新来宾，最好创建一个新线程。

最后一个原语是消息，消息只是用户和助手之间的帖子。

除了这些API原语，我们很高兴发布一些工具。第一个工具是代码解释器，允许模型在沙盒安全环境中编写和运行代码，执行数学运算，运行代码，处理文件，并生成图表。

第二个工具是知识检索，通过模型外部的知识来增强助手。开发者可以上传自己的知识给助手，用户也可以上传自己的文件。助手将根据用户查询使用智能检索模型。

最后一类工具是函数调用，您可以定义自定义函数为模型选择最相关的函数，提供调用该函数的参数。函数编码变得更智能，更有可能根据用户查询选择正确的参数。

除此之外，还有两个新功能将会稍后详细介绍。我们将做一个很酷的Assistant API演示，来展示构建我们自己的助手，比如地理辅导应用程序，向用户介绍世界各国首都，只需调用几个API即可开始使用。

由于大家都是开发人员，我将从在我的终端中进行一些 curl 请求开始。你可以在这里看到我的终端。这是很惊人的。我们将从第一个 curl 请求开始。现在我们想为我的地理助手应用程序建立支持。你可以看到我们正在向助手的端点发送消息，并传递两个关键信息。首先是模型。我们正在使用最新的 GPT-4 Turbo 模型，这是今天刚发布的最新型号。接下来，我们将指令传递给模型。你可以看到，我请求助手予以帮助并简洁地表明他是专家。当我发送该请求时，我获得了一名助手，并且我可以保存该助手 ID 以备后用。在使用助手 API之前，如果我想重复使用这些指令，我必须在每个API请求中将它们发送到OpenAI。现在，借助新的有状态API，我只需创建一次助手，即可永久存储指令。现在，让我们继续讨论Olivier提到的下一个原语，即线程。线程是用户和应用程序之间的一次会话。现在我的网站上有一个用户，他们开始输入地理问题，所以让我们创建一个线程。你可以看到我们正在向线程发送POST请求到端点，并且正文中没有任何内容，因为线程目前是空的。我们已经获得了一个线程 ID，因此像以前一样，我们保存它以备后用。

现在我的用户已经结束输入，我想将他们的消息添加到线程中。 让我们这样做吧。你可以看到我正在向线程、线程 ID 消息端点发布，并且传递有关消息的数据。消息是来自用户的，因为用户输入了该消息，内容是他们的问题。他们好奇，想知道法国的首都是什么。现在你可以看到我们收到了回复，我们获得了消息 ID，且该消息已添加到线程中。现在你可能想知道，我如何让我的助手开始对这个线程采取行动？我们引入了一个新原语称为run，这是我们调用助手的一种打包方式。现在让我的助手开始运行吧。你可以看到我正在向线程，线程 ID 运行端点发布，并传递助手 ID。 这很酷。实际上，你可以让多个不同的助手在同一个线程上工作，但现在，让我们使用我的地理助手。我将启动这个主题并告诉你一些背景信息。你可以看到我有一个运行 ID 并且该运行已排队。运行是我们打包所有工作的方式，包括加载模型、线程中的所有消息、截断适合模型的上下文窗口、调用模型，然后将任何结果消息保存回线程。让我们看看发生了什么。我们可以获取线程中的消息，看看助手是如何回复的。我将向线程的线程 ID 消息端点发送一个 GET 请求来查看。你可以看到我们收到了用户的第一条消息，然后助手回答说法国的首都是巴黎。这是一个超级简单的示例，但我们可以谈谈为什么它比以前的API更好。借助新的助手API，我不必在自己的数据库中存储任何消息，OpenAI处理截断消息以适应我的上下文窗口，即使我与API断开连接，模型输出仍会生成。最后，我以后总是可以获取模型输出的消息，它们总是保存到线程中。我认为这很酷。太棒了。这些是API的基础知识，现在让我们转向我最激动的部分，即它如何通过工具为您的应用程序提供支持。助手最有用的部分之一是它们能够利用工具自主执行操作。代码解释器是由OpenAI托管和执行的工具。当我在助手中启用代码解释器时，我可以扩展其功能，包括精确数学、处理文件、数据分析，甚至生成图像。

为了提高这些托管工具的质量和性能，我们对模型进行了微调，以确定何时调用这些工具、哪些输入最有效，以及如何最好地将输出集成到助手的响应中。现在让我们开始使用代码解释器。我实际上正在开发一个个人理财应用程序，我想让用户使用它来分析他们的交易。我们已经进入了终端，所以我们转到OpenAI游乐场。在这里，您可以看到一个您熟悉和喜爱的游乐场，用于测试聊天完成情况非常有用，但我们已经更新了它。您可以看到左上角有一个下拉菜单，可以选择“助手”选项卡。在游乐场上，您可以创建助手，更改其指令，并且可以启动对测试非常有用的线程。你实际上可以在API中看到我刚刚创建的助手。所有这些信息也都加载在这里。现在让我们创建一个新的助手，来展示代码解释器的强大功能。我正在创建一名个人财务助理。让我们给它起个名字吧。

我自称为个人理财天才。我想向大家介绍的是，这一助手可以帮助用户解决个人财务问题。我打算选择最新的GPT-4 Turbo型号。就在这里。我将启动代码解释器。只需一键点击或一行代码，您就可以为您的助手启用代码解释器。让我们保存这一步。太好了。现在，用户来到我的应用程序，他们想要分析他们的交易电子表格。我们来看看这份表格是什么样子的。您可以看到这里充斥着大量的信息和数字。日期甚至没有排序。情况实在是一团糟。让我们将其上传到线程中。现在我的用户需要一个图表，因此我生成了一份图表，显示出我一周中花费最多的那天。太神奇了。我已经完成了一系列操作来创建线程、添加消息，并开始运行。您可以看到后台正在进行的工作。让我们谈谈这到底是怎么回事吧。当我们开始运行时，我们会获取线程上的所有消息，总结它们以使得模型适应上下文环境，确定它是否调用了任何工具，执行工具，然后将该信息返回给模型。让我们来看看。哦，我们到达了目标。我们实际上已经得到了输出。[鼓掌]这确实令人吃惊。我没想到我会在周日花费最多的钱，但让我们看看我们是如何到达这一点的。您可以看到，我们的个人理财天才从告诉我们发生了什么开始。它实际上编写了一些代码。我们可以点击这里的代码。然后它继续编写更多的消息，最终生成了我们可以看到的图表。我们实际上可以更深入地了解这是如何发生的。我们可以看看我们所说的步骤。步骤基本上是您的运行日志，它们非常有用，让您可以呈现出一个丰富的用户界面，向用户展示正在发生的情况。您可以在日志选项卡这里看到，我可以打开它，向下滚动，然后找到本次运行的步骤。这类似于cron的逆向操作，所以我滚动到底部，我可以向您展示我们是如何到达这一点的。首先，您可以看到我们创建了一个步骤，它是一个消息类型。这对应于我们创建的第一个消息。接下来，您可以看到运行步骤是一个工具调用，用于代码解释器。这就是Playground渲染这一片段的方式。输入和输出直接在API中。接着，您可以看到与此消息对应的另一个消息创建步骤。然后还有一些代码解释器和消息片段。这些信息足以让您呈现出相同的用户界面。Playground实际上是完全基于我们的公共API构建的，因此您也可以这样做。这正是ChatGPT在使用代码解释器时在幕后进行的工作。您可以根据您的喜好设置应用的外观。现在让我们继续检索。

当您想扩展助手的知识时，使用检索工具是非常有帮助的。也许您有一些关于您的应用或业务的信息想要分享给您的助手。OpenAI构建了一个工具，在Playground中通过一行代码或一次单击即可使用，无需自行实现定制的检索系统。检索工具会处理所有文档解析、分块、生成嵌入以及确定何时使用它们，您无需过多操心这些步骤。让我们开始吧。我将隐藏日志，清除线程，并创建一个新的助手。我实际上正在建立一个助手，以协助用户更好地使用OpenAI API。我准备创建OpenAI API向导。看起来不错。现在我会告诉助手它具有响应用途，然后使用提供的文档来回答有关OpenAI API的问题。实际上，我会上传我的OpenAI文档的完整转储，它只是一个markdown文件，还没有经过处理。我将把它附加到助手上，然后只需单击一下即可进行检索。最后，让我们选择新的GPT-4 Turbo模型来拯救我们的助手。在保存这些数据时，我们实际上是在后端进行着工作，以确保助手可以访问这些数据。让我们看看当我的用户询问有关OpenAI API的问题时会发生什么。我的用户很好奇，他们想知道如何使用嵌入API？现在我们已经启动了。同样，在后台发生的事情是，我们正在收集所有的信息，根据需要对其进行截断，调用模型，并确定模型是否已经调用了检索工具，替您执行检索，然后将结果返回给总结模型。您可以看到，我们实际上从文档中提取了一个片段，甚至引用了文档中的直接引言，以便我们可以将其呈现给用户。我认为这很棒。[鼓掌]就像上一次一样，我们可以看一下步骤，看看我们是如何到达这一步的。这个稍微简单一些。首先，这个工具会调用检索工具，以让用户了解正在发生的情况。然后我们有一个消息创建步骤，以便您可以呈现此用户界面。太棒了。现在回到Olivier来解释如何使用具有不同级别文件范围的检索工具。谢谢您，米歇尔。知识检索对于利用来自模型之外的数据来增强助手的知识是非常有帮助的。具体的检索可以通过两种不同的方式进行。首先，您可以在助手级别上传和传递文件。如果您希望助手在每个线程的每次互动中都能利用这些知识，这将非常有用。例如，在客户支持和API文档的初始示例中，您可能想要在助手级别传递这些信息。第二个选择是在线程级别传递文件。如果您只想让特定线程了解该内容，这将非常实用。

如果要上传个人银行对账单，建议调用在线程级别的操作。在后台，检索将处理嵌入，有时不执行向量搜索，而是启动上下文，无需自己处理这些逻辑。未来几个月我们会推出多项新功能，允许选择不同的可重试策略，在成本、准确性和延迟之间平衡。Open AI永远不会对上传至API的任何文件或数据进行训练，包括检索的文件。接下来，我们继续讨论最后一类工具，即函数调用。函数调用是用户定义的自定义函数，模型代表用户选择这些函数。从今天开始我们发布了两个函数编码的新功能。第一个是JSON模式，模型保证返回有效的JSON。这非常有用，意味着您可以信任模型生成的JSON可直接在您的终端上执行，也可以在函数调用之外工作。第二个新功能是并行函数调用，模型可以一次调用多个函数。这个功能对于一次向助手发出多个指令的应用程序非常有用，而之前需要进行额外的延迟和成本。现在您可以一次处理这样的用例，非常方便。

让我们演示一下函数调用。我正在构建一个新型汽车，希望语音激活助手能够控制汽车的一些功能。已实现很多功能，让我们看一下之前创建的助手。我告诉助手这是一个有用的车载助手，请根据用户的请求调用适当的功能。通过函数调用，我有一个负责所有函数的助手，根据用户的输入和参数告诉我何时调用函数。这对于理解如何回应用户请求非常有用。现在让我们看一看这里有的一些功能，例如鸣喇叭，打电话，发送短信。

让我们来尝试一下。在我的车里，有一个用户，他只是说：“那个家伙刚刚打断了我的电话。”现在让我们看看助理确定调用哪个函数最有意义。在那里，我们的助理决定按喇叭让那个人知道这不礼貌。您可以在这里看到我们调用了一个不带参数的“按喇叭”函数。现在我知道如何将它传递到我的系统。我们还有一种方法可以让您将功能输出返回给助手，以便它可以继续运行。在这里，我将输入输出。任务完成。哎呀，我犯了一个拼写错误，但没关系。我们将继续前进。助理说：“我已经为你按喇叭了，请保持冷静。”实际上，我意识到这里缺少一个我想添加的功能。让我们向您展示添加功能的流程。您可以看到这里有一个按钮，我可以在其中添加功能。我们有一些有用的预设可以帮助您入门。让我们使用“获取股票”应用程序，并稍微修改为我的函数。我实际上想要一个能够改变车内音量的功能。我将其称为“设置音频音量”。我向助手描述情况：“设置汽车的音量。”现在我们需要告诉助手如何调用这个函数。我们可以告诉它参数以及它们是否是必需的。我的函数的主要参数是音量。实际上，音量不是一个字符串，而是一个数字。这是要设置的音量，范围是0到100。最后，我们要告诉助手，在调用这个函数时，这是必需的。太好了，这个功能看起来不错，我们保存一下。现在，我可以救我的助手了。您可以在这里看到新的“设置音频音量”功能列在左侧。让我们开始一个新线程。现在我的用户正在请求不同的查询。他们说，播放《奇墙》，并加快速度。在后台，我的助手正在确定调用哪一个函数最有意义。您可以在这里看到我们得到的输出，并且实际上有两个函数。这向您展示了并行函数调用的强大功能。第一个函数开始播放音乐，通过查询《奇墙》。说得通。第二个函数将音量设置为100。相当兴奋。现在我可以并行执行这些，然后返回到助手。惊人的。我们对并行函数调用感到非常兴奋。让我们回顾一下今天推出的所有内容。我们非常高兴看到您使用新的助手 API 构建了内容。我们添加了三个新的有状态原语，用于存储用户和助手之间的指令、模型和工具，用于跟踪所有对话的线程以及消息。我们还为您每次想要调用助手时添加了运行原语，并且添加了步骤，这些步骤是根据助手正在执行的操作渲染 UI 的有用日志。最后，我们推出了两个新工具：代码解释器和检索，并且我们对函数调用、JSON 模式和并行函数进行了两项巨大改进。

我们很高兴看到你已经构建了内容，现在由奥利维尔来介绍接下来将发生的事情。谢谢你，米歇尔。[掌声]一切都非常出色，但很快将有更多的进展。接下来的几个月里，我们计划为Assistant API带来许多新的改进。首先，我们希望API默认支持多模式，即能够处理和生成图像和音频文件。其次，我们希望您可以运行自己的代码，这样就可以在您的终端上执行助手生成的代码。我们即将发布的第三个重要功能是通过WebSocket和Webhooks提供异步支持，使实时应用程序更轻松地使用API。这是一个全新的功能，一个新产品，目前正在测试阶段。我们非常期待听到您打算构建什么。如果您有任何功能请求或愿望清单，请通过Twitter @OpenAI 发推并展示您构建的内容。我们迫不及待地想听到您的想法。非常感谢您，祝您愉快地开发！

不客气。祝您一天愉快！🌟