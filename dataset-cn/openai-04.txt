New Products: A Deep Dive - YouTube
https://www.youtube.com/watch?v=pq34V_V5j18

Transcript:
(00:00) [音乐] 大家早上好， 欢迎 来到今天的第一个突破性演讲。 我叫 Krithika， 负责 OpenAI 的营销工作。 我很高兴今天能在这里见到大家。 正如 Sam 在主题演讲中提到的那样， 我们确实正在朝着 更多类似代理的未来迈进， 并且 我们 在主题演讲中宣布了两款产品，我们 希望能够亲自实践。 首先， 我们想谈谈 GPT 和 ChatGPT。 我知道作为开发人员，您很高兴能够 使用 Assistant 的 API， 但是 GPT 中内置了很多功能和功能， 当您使用 自定义功能和操作扩展它们时， 它们会变得非常强大， 不仅对您自己而言， 而且对您也有帮助。 为全球数百万 用户提供服务。 其次，我们将介绍 Assistants API，它可以让您 在自己的应用程序和产品中构建这些类似代理的体验。
(01:07) 话不多说， 让我来介绍 Thomas 和 Nick， 向您展示有关 GPT 的更多信息。 [音乐] 大家好。 大家 好，我是 Thomas， GPT 项目的首席工程师。 嘿，我是尼克。 我负责 ChatGPT 的产品管理。 不到一年前，我们将 ChatGPT 发布 到我们认为 是低调的演示中， 去年的反响令人难以置信。 当我们提供各种功能时， 无论是 GPT-4 还是语音、 视觉或代码解释器， 有一件事非常非常清楚， 那就是您、 我们的用户、我们的构建者、 我们的开发人员知道如何 充分利用这项技术。 今天，我们非常高兴向 您展示 GPT，这是一种创建 您自己的自定义 ChatGPT 并与世界分享的方法。 GPT 包括三件事。 它们是指令，它们是操作， 它们是额外的知识， 我们将向您展示三个演示， 每个概念对应一个演示，
(02:12) 以便您可以更清楚地了解 它们的全部内容。 当然，最后，还有一件事， 我们将制作一个疯狂的演示， 尝试将 所有内容合而为一。 这些是现场演示。 我们都知道演示法则， 因此总有 10% 的 可能性它不起作用， 但我保证 我们将突破最近发布的 所有内容的极限 。 这应该是相当令人兴奋的。 尼克， 你想开始吗？ 我们开始 做吧。 好的。 开始了。 您在这里看到的是新的 ChatGPT，它 最好的一点是 它看起来几乎像旧的 ChatGPT。 没有太多改变。 模型选择器消失了。 这很棒， 但还有另一个新东西， 那就是“探索”选项卡。 让我点击该按钮向 您展示创建新 GPT 的情况。 在这里，我看到了 已创建的 GPT 列表， 但我将单击“创建 GPT”。 您在这里看到的是我们新的创建用户界面。 现在，这个 UI 的最大优点
(03:17) 是您可以通过 对话方式开始使用。 左侧的此选项卡可让 您与 GPT 构建者聊天 并迭代创建您的 GPT。 第二个选项卡是配置选项卡 ，它允许您检查 GPT 并修改其所有内部结构， 无论是说明、 知识、自定义操作 还是它有权访问的工具。 然后在右侧， 您可以使用 GPT 并查看它如何响应 真实用户。 现在，让我们从 第一个演示开始。 托马斯，你想告诉 我们都有哪些说明吗？ 当然，我愿意。 我们开始 做吧。 指令还有另一个名称： 系统消息， 但我们也可以将指令称为 赋予 GPT 个性的一种方式。 我将分享一些过时的 参考自白。 我开始编程的方式是 在 90 年代制作《半条命》模组。 谢谢。 我在中学时制作的模组之一 是关于海盗的。 我将保留一个非常过时的 主题一段时间， 但我保证我们会在 2023 年之前讨论一些关于海盗的内容。 让我们制作一个盗版 GPT。
(04:22) 我确实相信 大多数伟大的产品都是从玩具开始的， 所以有一点玩具演示， 但我认为这是一个很好的起点。 您可以将此 GPT 构建器 视为一块白板。 我要告诉它， 你是我们在 世界上最好的人工智能开发人员面前的现场演示。 我希望你说话像个海盗， 一个真正的咸海盗。 说啊。 好的。 显然，这不是一个预设的提示。 每次排练时 我都会改变 它。 我们将看到返回的内容， 但它能够 以自然语言理解， 就像 ChatGPT 立即执行作业一样。 编码器船长，很不错。 编码队长，没关系。 我们将选择编码队长。 我喜欢这个名字吗？ 我心里还有别的名字吗？
(05:24) 我再做一次。 让我们切换一下。 让它咸一点。 完美的。 我可以在创建 GPT 时对其进行优化。 它会理解 我需要进行的修改。 现在它将赋予它 一点个性， 并且它会做到这一点。 哦，抱歉，我应该 通过个人资料图片来表明身份。 个人资料图片势在必行。 我立刻就认出这是咸的。 精通人工智能的咸海盗。 我要买它。 如果我在这里深入了解幕后， 我认为 Sam 对此进行了 一些了解， 但这是 GPT 的配置选项卡， 因此您可以看到 幕后实际发生的情况。 魔法创造正在填充这些领域。 它在人工智能方面具有咸味的海盗技能， 然后我们有这些说明 部分。 仅从那个小对话来看， 说明实际上 比我放入其中的对话要长。 它给了我一些很好的东西。 指令的另一个词 实际上是系统提示符 ，因此它是系统提示符的重要组成部分， 您可以对其进行自定义。 选择一些对话 开头，然后正如尼克暗示的那样， 我们也拥有知识、能力 和自定义操作。
(06:31) 我现在就放弃演示。 尼克将会介入其中。 这里是测试选项卡， 所以我们可以尝试一下。 也许我可以说 其中一个入门问题，比如 机器学习的秘密是什么？ 这里有非常令人兴奋的东西。 我再次承诺提供一个过时的演示， 所以我们开始吧。 嘿，伙计，数据宝库——是的。 好的，我明白了。 以地图为特色，过度拟合海妖， 欠拟合浅滩。 其实还不错。 [笑] 这就是我的演讲。 不，那是测试模式。 当然，你可以发布 这个，我认为最令人兴奋的 部分是真正引入 开发人员的概念， 以及 ChatGPT 中用户生成的 内容。 如果我到这里去救， 你可以看到我可以救。 如果您不在工作空间中， 您实际上可以公开共享此内容， 但我 现在可以将其共享给 OpenAI 的人员。 我将继续并单击“确定”。 好吧，我们回到这里。 我们看到侧面是咸的。 现在我将尝试增强 此演示并将其恢复到 2023 年。 我 现在要切换到移动应用程序。 刚上台。
(07:37) 完美的。 您还会注意到， 我认为您还没有见过这个， 但是今天的 iOS 应用程序和 Android 应用程序将进行 一些改版 和一些设计清理， 我认为这真的很棒 并且您可以与 GPT 交互。 我们真正希望的 是这些 GPT 基本上可以在您能想到的任何地方使用。 它们确实是 “我在和谁说话？ 我有幸和谁 说话？”的答案。 这里有一点伏笔。 我向右滑动。 您会看到有这些 GPT。 果然，Salty 刚进来。 如果我走到这里， 我实际上可以 - 我在和谁说话？ 当然，这是2023年的部分。 让我点击此处的音频选项卡。 大家 好，您现在是 OpenAI 开发者日观众的面前。 请简短地介绍一下。 嘿，开发者日工作人员吗？ 你可以叫我 Salty，这是 有史以来在数字海洋中航行的最狡猾的 GPT。 我来这里是为了编织 人工智能的纱线，并 在浩瀚的科技海洋中遨游。 让我们一起扬帆起航，踏上这场伟大的 冒险之旅吧。
(08:42) [鼓掌] 我们有一个秘密的海盗声音在那里， 我们会看看我们是否可以运送它。 我们将非常感谢对此的一些反馈。 [笑] 尼克，你觉得那个演示怎么样？ 我不知道。 这很有趣， 但我不能说它有用，托马斯。 让我们做点有用的事情吧。 耻辱。 好的。 好的，我们讨论了 一些关于说明的内容。 说明 很棒，因为您可以为 您的 GPT 提供任何您想要的个性、 任何您想要的说明， 但我们对 GPT 结构进行了一些更令人兴奋的补充， 真正让您可以构建有用的东西。 谁以前构建过插件？ 首先谢谢你。 我们从你身上学到了很多。 这是我们第一次将 聊天 GPT 连接到外部世界， 我们将插件迭代 为一个称为操作的新概念。 操作与插件非常相似， 您可以将 GPT 连接到现实世界。 我制作了一个名为 Tasky Make Task Face 的 GPT。
(09:47) 很严重。 非常严肃的演示。 Tasky 很棒，因为 Tasky 可以 帮助我跟踪我的待办事项。 我刚刚点击编辑 GPT， 现在我能做的就是继续 对话。 每当您 想继续处理 GPT 时， 您都可以继续聊天。 由于时间原因， 我将进入配置选项 卡。 正如你所看到的，Tasky 的提示符， 它的指令集 稍微复杂一些。 我实际上花了一些时间来设置这个。 这里的另一个新部分 是我添加了一个动作， 您在前面的主题演讲中看到了这一点。 我们在这里使用 retool 来 包装 Asana API。 你几乎可以配置任何东西。 如果我单击此处的“编辑”， 实际上会出现一个新的 UI， 可让您导入 任何开放的 API 规范 并将其粘贴到此处， 这样您就不再需要托管它。 我们还使 O Auth 变得更好， 我们有最终用户对操作进行确认， 但我将在一分钟内向您展示所有这些。 确实，尼克从事的是错误的工作。 他没有谈论的是，幕后 还有身份验证 ，
(10:51) 因此您了解 并为最终用户喜爱的 O Auth 实际上也可以连接到这些应用程序 ，并且那里有很多令人兴奋的 东西。 对不起。 不打扰你的雷霆。 托马斯说的话。 超级简单。 如果您已有插件， 迁移需要几分钟时间。 让我用实际行动向您展示这一点。 为了节省时间， 我将仅使用预览 UI。 让我们看看我的待办事项中最重要的是什么。 正如您所知，它现在 向用户确认我确实想 发送数据以进行重组。 我愿意。 好吧，我确实需要完成这个演示。 我想就在我们说话的时候它已经完成了。 我确实想做一件事， 那就是让 所有活动参与者 今天都能访问 GPT 创建。 我们对你所构建的东西感到非常兴奋， 所以让我提醒自己。
(11:56) 提醒我让 DevDay 的酷人 能够访问 GPT 创建。 正如我能够阅读我的待办事项一样， 它将 通过提交实际的体式任务来记录待办事项。 非常有用。 繁荣。 该任务确实存在， 明天到期。 好吧，那是不对的。 我今天就要做。 行动，它们让你将 你的 GPT 连接到外部世界， 但 我们想向 你展示 GPT 解剖学中的另一个新概念，那就是知识。 我准备了另一个非常简单的GPT， Danny DevDay， Danny DevDay 了解 DevDay 的一切。 显然，即使在 2023 年 4 月的新知识截止日期下， 我们的预训练集中也不可能有关于 DevDay 的信息。 我所做的是，我实际上向 Danny 授予了 Sam 的 Keynote 脚本的访问权限。 如果我检查丹尼， 故事配置选项卡与以前相同。
(13:04) 你看到有一个超级简单的提示， 但我实际上上传了 一个 PDF，其中包含 主题演讲的新增内容， 我现在可以要求它简单的 事情，例如总结 主题演讲，因为它是一个小文件， 而且上下文 窗口不断增长， 我们 实际上将 其填充到此处的上下文中。 如果我附加更多文件， 它将 通过自动嵌入这些文件 并执行智能检索策略来检索这些文件，稍后 您将 在 API 中听到更多相关信息。 您已经看到了所有新内容， 但我认为最强大的东西 不仅仅是总结 数据，而是实际与您的 GPT 对话， 就好像它知道这些信息一样。 这确实是我们的愿望。 我们将随着时间的推移对此进行迭代。 我们为什么不做一些 更有创意的事情，比如， 你能在 旧的完成 API 和全新的辅助 API 之间进行一场说唱大战吗？ 托马斯向我保证 他将 在舞台上进行一场比赛。 [笑]我们会看到这一点。 我们会感受到能量。
(14:14) 好吧， 内置的检索和状态持续存在 ，进化是你无法抗拒的扭曲。 不错。 好吧，我们不打算说唱， 但你明白了。 它知道这些信息。 一切都在那里。 我们再次向您展示了 GPT 中每个核心部分的三个不同演示。 你看到了指令，你看到了行动， 现在你看到了知识，但是—— 必须把它们放在一起。 是的，我们愿意。 好吧，我们开始吧。 切换回这里。 好的。 我真的、 真的全力以赴，试图 思考我们可能 做的最疯狂但最有可能失败的事情。 首先，我做了一个 叫做 Mood Tunes 的小东西， 一个混音带大师。 尼克， 这部分我需要你。 我 不只是提示它，而是 尝试使用 我们最近推出的新事物之一， 我希望每个人都熟悉 并对此感到兴奋。 我将保留 可能过时的 2000 年代参考主题。 真正伟大的东西。 哦，尼克。
(15:21) 让我把它拖放到这里。 我要说的是心情。 [笑]在幕后， 我们的视觉 引擎在这里启动， 试图 准确地理解正在发生的事情。 完美的。 好的。 看着这张照片， 我感受到了一种悠闲的 同志情谊，带着一丝奇思妙想。 让我们发挥这种能量 并制作一张混音带。 我认为这很好。 这个很不错。 冷静的氛围和击掌。 事实上，我也加入了。 悠闲的同志情谊。 [笑] 三只小鸟—— 实际上， 这些东西我有一半都不认识，但是没关系。 伟大的。 现在我碰巧想起 一则信息。 在这个演示之前，我将 一堆知识上传到这个 GPT 中， 这是 关于我所有同事的有趣事实的列表。 我碰巧记得 我的一位同事是一个乐队的成员。 你能把 他们的一首歌放到第一位吗？ 完美的。
(16:28) 这里所做的是， 据了解我的同事 在一个乐队中，并立即 找到了他们的名字。 由于它没有歌曲信息， 因此将继续 使用 Bing 进行浏览。 上面 说的是 Sally Mango 的新乐队。 我希望每个人都听说过莎莉芒果。 非常令人兴奋的乐队，但不幸的是 他们还没有变得太大。 它们不在 GPT 的知识集中。 它必须浏览才能 获取该信息， 但它实际上成功地做到了这一点。 Sally Mango 的专辑《Pressure Slide》是 独立爵士流行乐队，以 严肃主题的音乐而闻名。 冷静的氛围和击掌。 从布埃纳维斯塔开始。 具有滚动基线，传达了 尽管未来存在不确定性但仍要活在当下的充满希望的信息。 我喜欢它。 好的，太好了。 我想说，爱它。 前进。 它表明它会生成专辑封面， 因此它正在获取视觉。 我们已经浏览完了。 现在将 使用 DALL·E 为该混音带生成封面艺术。 就像我说的， 我真的很喜欢突破 这些事情的极限，而且它非常出色。 我从事人工智能行业大概有十年了， 甚至更久。 令我震惊的是， 这竟然有效。 这里的
(17:33) 复杂程度 是疯狂的。 有一张 专为这些寒冷氛围和击掌而创作的专辑《艺术》。 版权也。 一探究竟。 它太酷了。 那很整齐。 尼克，我相信对于这一部分 你必须站在这个X上。 但这完全是假的。 别看尼克。 我在这里的氛围很好， 但我觉得气氛不太对劲。 我们先调整一下心情吧。 我已经在后端设置了这个操作， 它会猜测它的作用。 看看这里。 手指交叉在这里。 [鼓掌] 好吧，我们就定下气氛吧。 一些有问题的灯光选择， 但我们设定了气氛。 它经过了重新设计， 并连接到了 Hue API， 它能够点亮它。 我感受到了这种氛围。 你感觉到气氛了吗？ 我感觉到了气氛。 出色的。 它提供了 在 Spotify 上播放第一首曲目的服务。 让我在这里打开我的 Spotify。 只是为了让你知道。
(18:35) 找到了里克·阿斯利。 请继续。 再次，非常本土的乐队。 得到了那个信息。 让我们来看看。 [音乐] 寻找未来。 未来。 未来。 未来。 我们去哪儿了？ 这显然是 我们昨晚能想到的最好的办法。 相当做作， 但希望它能让您 了解可以构建的东西。 我们很高兴看到您所构建的内容。 今天你们都将获得访问权限。 请与世界分享 您的想法。 这样，我们将把 协助 API 交给 Olivier 和 Michelle。 [鼓掌] [音乐] 你好。 大家好。
(19:39) 我是 Olivier， OpenAI 平台的主导产品。 大家 好，我是 Michelle， 是 API 的工程主管。 今天，我非常高兴能够演示 新的辅助 API， 但首先 Olivier 将向 我们介绍更多相关信息。 我们开始 做吧。 好的。 过去一年人工智能援助的爆炸式增长对任何人来说都不应该感到惊讶。 当然，ChatGPT 一年前出人意料地席卷了世界， 但开发者 社区也一直在构建 一些令人惊叹的人工智能助手。 我个人 最喜欢的一些功能是 Spotify AI DJ， 它可以个性化 我的音乐聆听体验， 还有 Ask Instacart 功能， 它可以帮助我 为我两岁的孩子准备健康的膳食。 如果做得好，这些产品的 产品体验将是令人惊叹的。 它们很有趣，很有用， 并且真正个性化了 用户体验。 它们也非常难以 构建和正确使用。 在过去的几个月里，我们与开发人员进行了数百次对话， 同样的痛点 不断出现。
(20:46) 开发人员必须管理 有限的上下文窗口， 必须管理提示， 必须使用 API 和函数扩展模型的功能。 他们必须 通过检索来扩展模型的知识。 他们必须计算、存储嵌入、 实现对称搜索。 这样的 例子还在继续。 这让我们思考， 什么是合适的产品？ 正确的 API 在哪里？ 有哪些合适的工具可以帮助 您构建如此酷的人工智能产品？ 除了我们现有的模型和 API 之外，正确的抽象是什么？ 今天，我们很高兴推出 一个新的 API，即协助 API。 协助 API 使您 能够 直接在自己的应用程序中构建世界一流的协助。 从本质上讲，助手是一个由 你分配指令的人工智能。 助手可以 代表用户调用模型和工具。 在幕后， Assistance API 的构建与 用户 在 ChatGPT 中看到的功能相同， 例如代码解释器和检索。 该 API 具有三个关键原语。
(21:52) 第一个是助理。 助理模仿了 您向助理发出的指令。 您还可以在此处指定助理可以访问 哪些模型 和工具 来执行其工作。 例如，我可以创建 一个助手，其任务是回答 个人财务问题 并可以访问代码解释器。 第一个原语是辅助 API。 第二个原语是线程。 线程代表 用户和助手之间的会话。 您可以将线程视为对话。 一个对话 有一组参与者， 它可以跟踪 对话的消息历史记录。 与 Slack 或 Microsoft Teams 非常相似， 如果您想讨论新主题 或想向线程添加新与会者、 新来宾， 最好创建一个新线程。 第二个原语，线程。 最后一个原语是消息。 消息只是 用户和助手之间的帖子。 除了这些 API 原语之外，
(22:55) 我们非常高兴能够发布 一些工具。 第一个工具是代码解释器。 大多数人已经熟悉 ChatGPT 中的代码解释器。 代码解释器允许模型 在沙盒安全环境中编写和运行代码 。 它可以执行数学运算，可以运行代码， 甚至可以处理文件， 并代表您生成图表。 当你想到它时，它非常神奇。 代码解释器可以 代表您编写和运行代码。 借助 Assistant API，您的应用程序 现在可以直接调用代码 解释器并 直接在 API 中获取其输出。 很酷。 第二个工具是检索。 知识检索通过 模型外部的知识来增强助手。 开发者可以将 自己的知识上传给助手， 比如上传一些产品 信息给助手。 最终用户也可以上传 他们自己的文件，例如我将 我的个人硕士 论文上传给助手。 助手 将
(24:00) 根据用户查询智能检索模型。 它是一个完全预构建的工具。 您无需计算 嵌入、存储嵌入、 找出语义搜索。 Assistants API 会自动 帮您计算出来。 最后一类工具是 您自己托管和执行的工具。 我们将这些工具称为函数调用。 您为模型定义自定义函数， 模型将 根据用户查询选择最相关的函数， 并为您提供 调用该函数的参数。 总的来说，从今天开始， 函数编码变得越来越智能。 特别是，更有 可能根据用户查询选择 正确的参数 。 最 重要的是，还有两个新功能， 我们 稍后将详细介绍。 首先，让我们做一个很酷的 Assistant API 演示。 交给你了，米歇尔。 谢谢，奥利维尔。 现在让我们开始 构建我们自己的助手。 我正在构建一个地理辅导应用程序 来向我的用户介绍世界各国首都。 我只需调用几个 API 即可开始使用。
(25:05) 由于你们都是开发人员， 我将在我的终端中从 一些curl 请求开始。 你可以在这里看到我的终端。 惊人的。 我们将从 第一个卷曲请求开始。 现在我们想要创建这个助手 来为我的地理导师应用程序提供支持。 您可以看到我们正在 向助理的端点发布消息， 并且正在传递两条关键 信息。 首先是模型。 我们正在使用最新的 GPT-4 Turbo 型号，这是 今天刚刚下降的最新热量。 接下来，我们将 指令传递给模型。 您可以看到，我要求 助理提供帮助 并简洁地 表明他是专家。 当我发送该请求时， 我会找回一名助理， 并且我可以存储 该助理 ID 以供以后使用。 在使用助手 API 之前， 如果我想 重复使用这些指令， 我必须 在每个 API 请求中将它们发送到 OpenAI。 现在，借助新的有状态 API， 我只需创建一次助手即可将 指令 永久存储在那里。 现在，让我们继续讨论 Olivier 提到的下一个原语，
(26:08) 即线程。 线程是 用户和应用程序之间的一次会话。 现在 我的网站上有一个用户，他们开始 输入地理 问题，所以让我们创建一个线程。 您可以在这里看到我们正在发布 到线程的端点， 并且正文中没有任何内容， 因为线程现在是空的。 我们已经有了一个线程 ID，所以就像以前一样， 让我们​​保存它以供以后使用。 凉爽的。 现在我的用户已经完成输入， 我想将 他们的消息添加到线程中。 让我们这样做吧。 您可以在此处看到 我正在发布到线程、 线程 ID 消息、端点， 并且我正在传递 有关消息的数据。 该角色来自用户， 因为用户输入了此消息， 内容是他们的问题。 他们很好奇，想 知道法国的首都是什么。 凉爽的。 现在您可以看到我们收到了回复， 我们收到了消息 ID，并且该消息 已添加到线程中。 现在您可能想知道，
(27:10) 我怎样才能让我的助手 开始对此线程采取行动？ 我们引入了一种称为 run 的新原语， 这就是我们打包对 助手的一次调用的方式。 现在让我的助手开始跑步吧。 您可以在此处看到我正在发布 到线程，线程 ID 运行端点， 并且我正在传递助理 ID。 这很酷。 实际上，您可以让多个 不同的助手 在同一线程上工作，但现在， 让我们使用我的地理助手。 我将开始这个话题并告诉 你一些关于 后台发生的事情。 您可以看到我有一个运行 ID 并且该运行已排队。 运行是我们打包 所有工作的方式，包括加载模型、 线程中的所有消息、 截断适合 模型的上下文窗口、 调用模型，然后将 任何结果消息保存回线程。 让我们来看看发生了什么。 我们可以抓取线程中的消息， 看看助理是如何回复的。 我将向 线程的线程 ID 消息 端点发出一个 get 请求，看看有什么。 您可以看到 我们收到了用户的第一条消息，
(28:14) 然后助理回复 说法国的首都是巴黎。 这是一个超级简单的 示例，但我们可以谈谈 为什么它比以前的 API 更好。 借助新的助手 API， 我不必 在自己的数据库中存储任何消息。 OpenAI 处理截断消息 以适合我的上下文窗口。 即使我与 API 断开连接，也会生成模型输出。 最后，我以后总是可以获取 模型输出的消息， 它们总是保存到线程中。 我认为这很酷。 [鼓掌] 太棒了。 这些是 API 的基础知识， 现在让我们转向 我最兴奋的部分，即 它如何 通过工具为您的应用程序提供支持。 助手 最有用的部分之一 是他们 能够利用工具 自主执行操作。 代码解释器是 由 OpenAI 托管和执行的工具。 当我 在助手中启用代码解释器时， 我可以扩展其功能， 包括精确数学、 处理文件、数据分析， 甚至生成图像。
(29:22) 为了优化 这些托管工具的质量和性能， 我们对模型进行了微调，以最好地确定 何时调用这些工具、 哪些输入最有效 以及如何最好地将 输出集成到助手的响应中。 现在让我们开始 使用代码解释器。 我实际上正在构建 一个个人理财应用程序， 我想将其发送给我的用户， 让他们分析他们的交易。 我们已经进入了终端， 所以让我们 转到 OpenAI 游乐场。 在这里，您可以看到 您熟悉和喜爱的游乐场， 它 对于测试聊天完成情况非常有用， 但我们实际上已经 刷新了它，您可以看到 左上角有一个下拉菜单， 可以选择“助手”选项卡。 在操场上， 您可以看到您可以创建助手， 更改其指令， 并且可以启动 对测试非常有用的线程。 你实际上可以 在API中看到我刚刚创建的助手。 所有这些信息 也都加载在这里。 现在让我们创建一个新的助手来 展示代码解释器的强大功能。 我正在创建一名个人财务助理。 我们给它起个名字吧。
(30:24) 我将 其称为个人理财天才。 我要告诉它的是， 你帮助用户解决 他们的个人财务问题。 现在我要选择一个型号， 我要选择 最新的 GPT-4 Turbo。 就在 那里。 我要打开代码解释器。 只需一键点击或一行代码， 您就可 以为您的助手启用代码解释器。 让我们保存它。 伟大的。 现在，用户 来到我的应用程序，他们 想要分析 其交易的电子表格。 让我们看看它是什么样子的。 你可以看到这里有一堆 信息，一堆数字。 日期甚至没有排序。 实在 是太乱了。 让我们将其上传到线程中。 现在我的用户需要一个图表， 因此生成一个图表，显示 我一周中哪一天花的钱最多。 惊人的。 现在我已经完成了一个复合 操作来创建线程、
(31:27) 添加消息并开始运行。 您可以看到 后台正在发生的事情。 我们来谈谈到底是怎么回事吧。 当我们开始运行时， 我们将获取 线程上的所有消息， 总结它们以使模型 适合上下文窗口， 确定它是否调用任何工具， 执行工具， 然后将该信息 返回给 模型。 让我们来看看。 哦，我们到了。 我们实际上已经得到了输出。 [鼓掌] 这确实很令人惊讶。 我没想到我会 在周日花最多的钱， 但让我们看看我们是如何到达这里的。 你可以看到，我们的个人 理财天才 是从告诉我们发生了什么开始的。 它实际上写了一些代码。 我们可以点击这里的代码。 然后它继续写入更多消息， 最后生成了 我们可以看到的图表。 我们实际上可以更深入地 了解这是如何发生的。 我们可以看看我们所说的步骤。 步骤基本上是您的跑步日志， 它们非常有用，因此您可以呈现
(32:29) 自己的丰富 UI 来向 用户展示正在发生的情况。 您可以在此处看到日志选项卡， 我可以打开它，向下滚动， 然后找到本次运行的步骤。 这是反向 cron， 所以我滚动到底部， 我可以向您展示我们是如何到达这里的。 首先，您可以看到我们创建了 一个步骤，并且它具有类型消息。 这与 我们创建的第一条消息相对应。 接下来，您可以看到运行步骤 是一个工具调用， 用于代码解释器。 这就是 Playground 渲染此片段的方式。 输入和输出 直接在 API 中。 接下来，您可以看到与 此消息对应的另一个消息创建步骤。 然后还有一些代码 解释器和消息片段。 所有这些信息足以 让您呈现相同的 UI。 Playground 实际上 完全基于我们的公共 API 构建， 因此您也可以这样做。 说到这里，这正是 ChatGPT 使用代码解释器时在幕后所做的事情。 您可以将应用程序的外观设置 为您喜欢的外观。 现在让我们继续进行检索。
(33:35) 当您想要扩展 助手的知识时，检索工具非常有用。 也许您有一些 关于您的应用 或业务的信息 想要向您的助手提供。 OpenAI 构建了一个工具，您可以 在 Playground 中通过一行代码或一次单击来使用，而不必在您的一端实现自定义检索系统。 检索工具会执行 所有文档解析、 分块、生成嵌入、 确定何时使用它们， 因此您无需这样做。 让我们开始吧。 我将隐藏日志， 清除该线程， 并创建一个新的助手。 现在，我实际上正在 构建一个助手来帮助 我的用户更好地使用 OpenAI API。 我将创建 OpenAI API 向导。 看起来不错。 现在我将告诉它 它是一个有用的助手，然后使用 随附的文档来回答 有关 OpenAI API 的问题。 其实我也要去上传了
(34:41) 我有 OpenAI 文档的完整转储， 只是一个 markdown 文件， 根本没有处理。 我将把它附加到助手上， 然后 只需单击一下即可翻转检索。 最后，让我们选择新的 GPT-4 Turbo 模型并拯救我们的助手。 在保存这些数据时， 我们实际上是 在后端进行工作， 以使 助手可以访问这些数据。 让我们看看当我的用户 询问有关 OpenAI API 的问题时会是什么样子。 我的用户很好奇，他们想知道 如何使用嵌入 API？ 现在我们已经开始跑步了。 同样， 在后台发生的事情 是，我们正在获取所有消息， 根据需要截断它们，调用模型， 确定模型是否 已调用检索工具， 为您执行检索， 然后将其返回 给 要总结的模型。 您可以在这里看到，我们实际上 从文档中获取了一个片段 ，我们甚至还引用了 我们文档中的直接引用， 以便我们可以将其呈现给用户。 我认为这很酷。 [鼓掌]
(35:48) 就像上次一样， 我们可以看一下步骤， 看看我们是如何到达这里的。 这个稍微简单一点。 首先， 该工具调用检索工具， 以便您可以让用户知道正在发生的情况 。 然后我们有一个消息 创建步骤，以便您可以渲染此 UI。 惊人的。 现在回到 Olivier 来解释如何使用 具有 不同级别文件范围的检索工具。 谢谢你，米歇尔。 知识检索对于使用模型外部的数据来 增强 助手的知识非常有用 。 具体检索可以 通过两种不同的方式进行。 第一，您可以 在助理级别上传和传递文件。 如果您希望 助手 在每个线程的每次交互中都利用这些知识，那么这非常有用。 例如，在有关 客户支持和 API 文档的初始示例中， 您可能应该 在助理级别传递该信息。 第二个选项是 在线程级别传递文件。 如果您 只想让特定 线程了解该内容，这很有用。
(36:52) 如果我要上传 个人银行对账单， 我可能应该在线程级别执行此操作。 在幕后， 检索将处理嵌入。 有时它甚至不进行 向量搜索而是 启动上下文。 您实际上不必自行 处理该逻辑。 我们很高兴 在未来几个月内推出多项新功能。 例如，我们希望允许您 在不同的可重试策略之间进行选择， 以 在成本、准确性和延迟之间找到适当的平衡 。 最后提醒一下。 Open AI 永远不会对 您传递给 API 的任何文件或数据进行训练。 检索文件也是如此。 好吧， 让我们继续讨论最后一类 工具，函数调用。 同样，函数调用 是您为模型定义的自定义函数， 模型 代表您选择这些函数。 我们很高兴从 今天开始发布函数编码的两项新功能。 第一种是JSON模式。 使用 JSON 模式， 模型将始终返回有效的 JSON。 在幕后，我们对模型进行了 改进，并对
(37:59) 我们的内部推理 堆栈进行了改进，以约束 模型的采样并确保 每次输出都 符合 JSON 语法。 这非常有用。 这意味着您可以相信 该模型生成的 JSON 可以直接 在您的终端上执行。 太酷了。 顺便说一句，JSON 模式也可以在 函数调用之外工作。 例如，如果您使用 聊天完成 API，并且您有 一个非常简单的应用程序，就像 数据提取中的文本一样， 例如转换 为 JSON 的某些字段，那么 JSON 模式也可以工作。 函数调用的第二个改进 是并行函数调用。 通过并行函数调用， 模型可以 一次调用多个函数。 我们 在许多应用程序中看到用户 一次向助手发出多个指令。 比方说，我正在构建 一个汽车语音助手 ，我告诉助手， 打开车窗并打开收音机。 在并行函数调用之前， 这意味着 您必须对 OpenAI 进行两个不同的模型 调用，
(39:06) 这当然会 导致额外的延迟和成本。 通过并行函数调用，这样的 用例可以通过 一次调用来处理，这非常棒。 好了， 现在我们来演示一下函数调用。 惊人的。 回到演示。 我正在构建奥利维尔的示例， 我正在构建一种新型 汽车，我希望语音激活 助手能够使用 汽车的一些功能。 我已经 实现了很多功能。 让我们调出 我之前创建的助手。 这里是。 我之前创建了这个汽车助手 ，我告诉它这是一个有用的车载 助手，请 根据用户的请求调用适当的功能。 通过函数调用，我有一个负责 所有函数的助手 ，我的助手会 根据用户的输入 以及最合适的 参数告诉我何时调用我的函数。 这非常有帮助，因此我可以弄清楚 如何使用我的系统 来回答用户的请求。 让我们看一下 我这里的一些功能。 我有很多 你可能希望看到的东西。 鸣喇叭，开始打电话， 发送短信。
(40:13) 让我们尝试一下。 我车里 有一个用户， 他们只是说： “那家伙刚刚打断了我的电话。” 让我们看看 助理确定 调用哪个函数最有意义。 就在 那里。 我们的助理决定按喇叭 让那个人知道这不酷。 您可以在这里看到我们调用了 不带参数的 honk horn 函数。 现在我知道如何将它传递到我的系统。 我们还有一种方法可以让您将 功能输出返回 给助手，以便它可以继续运行。 在这里，我将输入输出。 成功了。 哎呀，我有一个错字， 不过没关系。 我们将继续前进。 助理说 我已经为你按喇叭了。 请保持冷静。 实际上，我意识到 这里 缺少一个我想添加的功能。 让我们向您展示添加功能流程。 您可以看到这里有一个按钮， 我可以在其中添加功能。 我们有一些有用的预设 可以帮助您入门。 让我们使用 get_stock 应用程序并将 其稍微更改为我的函数。 我实际上想要一个
(41:16) 能够改变 车内音量的功能。 我将其称为“设置音频音量”。 我要把情况 描述给助理。 设置汽车的音量。 现在我们需要告诉助手 如何调用这个函数。 我们可以告诉它参数 以及它们是否是必需的。 我的函数的主要参数是音量。 实际上，音量不是字符串， 而是数字。 这是要设置的音量，范围 是0到100。 最后，我们会告诉助手， 当你调用这个函数时，这是必需的。 太好了，这个功能看起来不错， 我们保存一下吧。 现在，我可以救我的助手了。 您可以在此处看到新的“设置音频 音量”功能列在左侧。 让我们开始一个新线程。 现在我的用户正在 请求不同的查询。 他们说， 玩《Wonderwall》并加快速度。 在后台， 我的助手正在确定调用
(42:19) 这些函数中的哪一个 最有意义。 您可以在这里看到我们得到的输出， 并且实际上有两个函数。 这向您展示了 并行函数调用的强大功能。 第一个函数 通过查询 Wonderwall 开始播放音乐。 说得通。 第二个将音量设置为 100。 相当兴奋。 现在我可以并行执行这些， 然后返回到助手。 惊人的。 我们对 并行函数调用感到非常兴奋。 让我们回顾一下 今天推出的所有内容。 我们非常高兴看到您 使用新的 Assistants API 构建的内容。 我们添加了三个新的有状态原语。 助手用于存储用户和助手之间的指令、 模型和工具、 用于跟踪 所有对话的线程以及消息 。 我们还为您每次想要调用助手时添加了运行原语 ，并且添加了步骤， 这些步骤是 根据助手正在执行的操作渲染 UI 的有用日志。 最后，我们推出了两个新工具： 代码解释器和检索， 并且我们对 函数调用、 JSON 模式和并行函数进行了两项巨大改进。
(43:23) 我们非常高兴看到您所构建的内容， 现在请奥利维尔 告诉您接下来会发生什么。 谢谢你，米歇尔。 [掌声] 已经很多了， 但很快还会有更多。 我们计划 在未来几个月内对 Assistant API 进行许多新的改进。 第一，我们希望 API 默认为多模式。 它应该能够接受 并生成图像和音频文件。 第二，我们希望您 能够 执行自己的代码， 这样您就可以在您的终端上执行助手 生成的代码 。 我们希望很快发布的 第三个重要功能 是 通过 WebSocket 和 Webhooks 提供异步支持，以使 实时应用程序更轻松地使用 API。 这是一个新功能， 一个新产品，还处于测试阶段。 我们很想听听您将构建什么。 如果您有任何功能请求、 任何愿望清单， 请通过 Twitter @OpenAI 向我们发送推文， 并向我们展示您构建的内容。 我们很想听听这一切。 非常感谢您，祝您开发日愉快。
(44:27) 谢谢。 [鼓掌] [音乐]
